// Signature file for parser generated by fsyacc
module Parser
type token = 
  | BOX
  | RLABEL
  | LLABEL
  | LESSEQUAL
  | GREATEREQUAL
  | INEQUALITY
  | ASSIGNMENT
  | DOUBLESTAR
  | DOUBLEDOT
  | ARROW
  | PIPE
  | GREATER
  | EQUAL
  | LESS
  | SEMICOLON
  | COLON
  | SLASH
  | PERIOD
  | MINUS
  | COMMA
  | PLUS
  | STAR
  | RPAREN
  | LPAREN
  | QUOTE
  | AMPERSAND
  | NUMERIC_LITERAL of (string)
  | IDENTIFIER of (string)
  | EOF
  | XOR
  | WITH
  | WHILE
  | WHEN
  | USE
  | UNTIL
  | TYPE
  | THEN
  | TERMINATE
  | TASK
  | TAGGED
  | SYNCHRONIZED
  | SUBTYPE
  | SOME
  | SEPARATE
  | SELECT
  | REVERSE
  | RETURN
  | REQUEUE
  | RENAMES
  | REM
  | RECORD
  | RANGE
  | RAISE
  | PROTECTED
  | PROCEDURE
  | PRIVATE
  | PRAGMA
  | PACKAGE
  | OVERRIDING
  | OUT
  | OTHERS
  | OR
  | OF
  | NULL
  | NOT
  | NEW
  | MOD
  | LOOP
  | LIMITED
  | IS
  | INTERFACE
  | IN
  | IF
  | GOTO
  | GENERIC
  | FUNCTION
  | FOR
  | EXIT
  | EXCEPTION
  | ENTRY
  | END
  | ELSIF
  | ELSE
  | DO
  | DIGITS
  | DELTA
  | DELAY
  | DECLARE
  | CONSTANT
  | CASE
  | BODY
  | BEGIN
  | AT
  | ARRAY
  | AND
  | ALL
  | ALIASED
  | ACCESS
  | ACCEPT
  | ABSTRACT
  | ABS
  | ABORT
type tokenId = 
    | TOKEN_BOX
    | TOKEN_RLABEL
    | TOKEN_LLABEL
    | TOKEN_LESSEQUAL
    | TOKEN_GREATEREQUAL
    | TOKEN_INEQUALITY
    | TOKEN_ASSIGNMENT
    | TOKEN_DOUBLESTAR
    | TOKEN_DOUBLEDOT
    | TOKEN_ARROW
    | TOKEN_PIPE
    | TOKEN_GREATER
    | TOKEN_EQUAL
    | TOKEN_LESS
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_SLASH
    | TOKEN_PERIOD
    | TOKEN_MINUS
    | TOKEN_COMMA
    | TOKEN_PLUS
    | TOKEN_STAR
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_QUOTE
    | TOKEN_AMPERSAND
    | TOKEN_NUMERIC_LITERAL
    | TOKEN_IDENTIFIER
    | TOKEN_EOF
    | TOKEN_XOR
    | TOKEN_WITH
    | TOKEN_WHILE
    | TOKEN_WHEN
    | TOKEN_USE
    | TOKEN_UNTIL
    | TOKEN_TYPE
    | TOKEN_THEN
    | TOKEN_TERMINATE
    | TOKEN_TASK
    | TOKEN_TAGGED
    | TOKEN_SYNCHRONIZED
    | TOKEN_SUBTYPE
    | TOKEN_SOME
    | TOKEN_SEPARATE
    | TOKEN_SELECT
    | TOKEN_REVERSE
    | TOKEN_RETURN
    | TOKEN_REQUEUE
    | TOKEN_RENAMES
    | TOKEN_REM
    | TOKEN_RECORD
    | TOKEN_RANGE
    | TOKEN_RAISE
    | TOKEN_PROTECTED
    | TOKEN_PROCEDURE
    | TOKEN_PRIVATE
    | TOKEN_PRAGMA
    | TOKEN_PACKAGE
    | TOKEN_OVERRIDING
    | TOKEN_OUT
    | TOKEN_OTHERS
    | TOKEN_OR
    | TOKEN_OF
    | TOKEN_NULL
    | TOKEN_NOT
    | TOKEN_NEW
    | TOKEN_MOD
    | TOKEN_LOOP
    | TOKEN_LIMITED
    | TOKEN_IS
    | TOKEN_INTERFACE
    | TOKEN_IN
    | TOKEN_IF
    | TOKEN_GOTO
    | TOKEN_GENERIC
    | TOKEN_FUNCTION
    | TOKEN_FOR
    | TOKEN_EXIT
    | TOKEN_EXCEPTION
    | TOKEN_ENTRY
    | TOKEN_END
    | TOKEN_ELSIF
    | TOKEN_ELSE
    | TOKEN_DO
    | TOKEN_DIGITS
    | TOKEN_DELTA
    | TOKEN_DELAY
    | TOKEN_DECLARE
    | TOKEN_CONSTANT
    | TOKEN_CASE
    | TOKEN_BODY
    | TOKEN_BEGIN
    | TOKEN_AT
    | TOKEN_ARRAY
    | TOKEN_AND
    | TOKEN_ALL
    | TOKEN_ALIASED
    | TOKEN_ACCESS
    | TOKEN_ACCEPT
    | TOKEN_ABSTRACT
    | TOKEN_ABS
    | TOKEN_ABORT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (string) 
